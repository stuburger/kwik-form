/*! For license information please see 60875e34.ddaa8121.js.LICENSE.txt */
(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{158:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return l})),t.d(n,"metadata",(function(){return u})),t.d(n,"rightToc",(function(){return s})),t.d(n,"default",(function(){return c}));var r=t(2),a=(t(0),t(178)),o=t(189),i=t(187);const l={id:"tutorial",title:"Tutorial",sidebar_label:"Tutorial"},u={id:"tutorial",title:"Tutorial",description:"Building a signup form using Yafl",source:"@site/docs/tutorial.md",permalink:"/yafl/docs/tutorial",sidebar_label:"Tutorial",sidebar:"main",previous:{title:"Yet. Another. Form. Library.",permalink:"/yafl/docs/overview"},next:{title:"Validating user input",permalink:"/yafl/docs/validation"}},s=[{value:"Building a signup form using Yafl",id:"building-a-signup-form-using-yafl",children:[]},{value:"Setup",id:"setup",children:[{value:"Explanation",id:"explanation",children:[]},{value:"Wiring up TextInput",id:"wiring-up-textinput",children:[]}]}],p={rightToc:s};function c({components:e,...n}){return Object(a.b)("wrapper",Object(r.a)({},p,n,{components:e,mdxType:"MDXLayout"}),Object(a.b)("h2",{id:"building-a-signup-form-using-yafl"},"Building a signup form using Yafl"),Object(a.b)("p",null,"Imagine you're building a website where users can sign up with a username and password. Usually this is done using a form. This tutorial will walk you through the process of creating a signup form for a fictional web application. This form will contain a username field, password field and confirm password field. In part 2 of this tutorial we will at the different way we can implement validation for our signup form."),Object(a.b)("h2",{id:"setup"},"Setup"),Object(a.b)("p",null,"Before we get started make sure you've installed Yafl in your project."),Object(a.b)("p",null,"Now that you've added Yafl to your project's dependencies ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"./overview#installation"}),"using npm or yarn")," we're ready to start creating our signup form. To make this tutorial easy to follow we've created some simple scaffolding to help get you started. If you're using TypeScript click here. If you're using JavaScript you can follow along here."),Object(a.b)("p",null,"You'll find the following components:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"SignupForm.ts|js")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"TextInput.ts|js"))),Object(a.b)("p",null,"First let's look at the ",Object(a.b)("inlineCode",{parentName:"p"},"SignupForm")," component. This is the component where we'll be building our form."),Object(a.b)(o.a,{defaultValue:"js",values:[{label:"JavaScript",value:"js"},{label:"TypeScript",value:"ts"}],mdxType:"Tabs"},Object(a.b)(i.a,{value:"js",mdxType:"TabItem"},Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js",metastring:'title="/src/SignupForm.js"',title:'"/src/SignupForm.js"'}),'import { Form } from \'yafl\'\nimport TextInput from \'./TextInput\'\n\nconst initialValue = {\n  email: \'\',\n  password: \'\',\n  confirmPassword: \'\'\n}\n\nfunction SignupForm(props) {\n  function handleSubmit(value) {\n    console.log(value)\n  }\n\n  return (\n    <Form\n      initialValue={initialValue} \n      onSubmit={handleSubmit}\n    >\n      {(yafl) => (\n        <form onSubmit={yafl.submit}>\n          <TextInput name="email" />\n          <TextInput name="password" type="password" />\n          <TextInput name="confirmPassword" type="password" />\n          <button type="submit">Sign up!<button>\n        </form>\n      )}\n    </Form>\n  )\n}\n\n'))),Object(a.b)(i.a,{value:"ts",mdxType:"TabItem"},Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts",metastring:'title="/src/SignupForm.tsx"',title:'"/src/SignupForm.tsx"'}),"import React from 'react'\nimport { Form } from 'yafl'\nimport TextInput from './TextInput'\n\ninterface FormValue {\n  email: string;\n  password: string;\n  confirmPassword: string;\n}\n\nconst initialValue: FormValue = {\n  email: '',\n  password: '',\n  confirmPassword: ''\n}\n\nfunction SignupForm(props: {}) {\n  function handleSubmit(value: FormValue) {\n    console.log(value)\n  }\n\n  return (\n    <Form<FormValue> \n      initialValue={initialValue} \n      onSubmit={handleSubmit}\n    >\n      {(yafl) => {\n        return (\n          <form onSubmit={yafl.submit}>\n            <TextInput<string> name=\"email\" />\n            <TextInput<string> name=\"password\" type=\"password\" />\n            <TextInput<string> name=\"confirmPassword\" type=\"password\" />\n            <button type=\"submit\">Sign up!<button>\n          </form>\n        )\n      }}\n    </Form>\n}\n")))),Object(a.b)("h3",{id:"explanation"},"Explanation"),Object(a.b)("p",null,"First let's talk about the ",Object(a.b)("inlineCode",{parentName:"p"},"<Form>")," component. In a way this is the most important component exported by Yafl as it contains all of your form's state as well as the behaviors that make Yafl work. It remembers things like which fields you've ",Object(a.b)("inlineCode",{parentName:"p"},"visited")," and ",Object(a.b)("inlineCode",{parentName:"p"},"touched"),", the ",Object(a.b)("inlineCode",{parentName:"p"},"errors")," produced when validating your form and it knows how to set these values when reacting to user input."),Object(a.b)("p",null,"The ",Object(a.b)("inlineCode",{parentName:"p"},"<Form>")," component renders is children as a function which accepts a parameter (",Object(a.b)("inlineCode",{parentName:"p"},"yafl"),") containing helper functions such as ",Object(a.b)("inlineCode",{parentName:"p"},"resetForm()")," and form state such as ",Object(a.b)("inlineCode",{parentName:"p"},"formIsDirty"),", etc. Read more about the ",Object(a.b)("inlineCode",{parentName:"p"},"FormProps")," that are available ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"./form#form-props"}),"here"),"."),Object(a.b)("p",null,"The second component that we're importing is a custom component called ",Object(a.b)("inlineCode",{parentName:"p"},"TextInput")," and it represents a text field on our form that can be used to capture user input."),Object(a.b)("h3",{id:"wiring-up-textinput"},"Wiring up TextInput"),Object(a.b)("p",null,"If you're following along you'll notice that the text inputs in our sign up form do not work. In order to get them working we'll need to tell Yafl about these fields. We do this using the ",Object(a.b)("inlineCode",{parentName:"p"},"useField")," hook."),Object(a.b)(o.a,{defaultValue:"js",values:[{label:"JavaScript",value:"js"},{label:"TypeScript",value:"ts"}],mdxType:"Tabs"},Object(a.b)(i.a,{value:"js",mdxType:"TabItem"},Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js",metastring:'title="/src/TextInput.js"',title:'"/src/TextInput.js"'}),"import React from 'react'\nimport { useField } from 'yafl'\n\nfunction TextInput(props) {\n  const { name, label, type } = props\n  const [input] = useField(name);\n\n  return (\n    <>\n      <label htmlFor={name}>{label}</label>\n      <input \n        name={name}\n        type={type}\n        onBlur={input.onBlur}\n        onFocus={input.onFocus}\n        onChange={input.onChange}\n        // Or simply spread {...input}\n      />\n    </>\n  );\n}\n\nexport default TextInput\n\n"))),Object(a.b)(i.a,{value:"ts",mdxType:"TabItem"},Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts",metastring:'title="/src/TextInput.tsx"',title:'"/src/TextInput.tsx"'}),"import React from 'react'\nimport { useField } from 'yafl'\n\ninterface TextInputProps {\n  name: string;\n  label: string;\n  type?: string;\n}\n\nfunction TextInput<T, F extends object = {}>(props: TextInputProps) {\n  const { name, label, type = 'text' } = props\n  const [input] = useField<T, F>(name);\n\n  return (\n    <>\n      <label htmlFor={name}>{label}</label>\n      <input\n        name={name}\n        type={type}\n        onBlur={input.onBlur}\n        onFocus={input.onFocus}\n        onChange={input.onChange}\n        // Or simply spread {...input}\n      />\n    </>\n  );\n}\n\nexport default TextInput\n")))),Object(a.b)("p",null,"So what's going on here? Notice is that we're importing and using Yafl's ",Object(a.b)("inlineCode",{parentName:"p"},"useField"),' hook. This hook returns a tuple that can be destructured to pull out a fields "input" props (the first value) that can be spread over your inputs. The second value contains form state and utility functions that are made available for convenience. You can read more about the ',Object(a.b)("inlineCode",{parentName:"p"},"useField")," hook ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"./usefield"}),"here")," "))}c.isMDXComponent=!0},178:function(e,n,t){"use strict";t.d(n,"a",(function(){return c})),t.d(n,"b",(function(){return f}));var r=t(0),a=t.n(r);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function u(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=a.a.createContext({}),p=function(e){var n=a.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=p(e.components);return a.a.createElement(s.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},b=a.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,s=u(e,["components","mdxType","originalType","parentName"]),c=p(t),b=r,f=c["".concat(i,".").concat(b)]||c[b]||m[b]||o;return t?a.a.createElement(f,l(l({ref:n},s),{},{components:t})):a.a.createElement(f,l({ref:n},s))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=b;var l={};for(var u in n)hasOwnProperty.call(n,u)&&(l[u]=n[u]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=t[s];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"},179:function(e,n,t){var r;!function(){"use strict";var t={}.hasOwnProperty;function a(){for(var e=[],n=0;n<arguments.length;n++){var r=arguments[n];if(r){var o=typeof r;if("string"===o||"number"===o)e.push(r);else if(Array.isArray(r)&&r.length){var i=a.apply(null,r);i&&e.push(i)}else if("object"===o)for(var l in r)t.call(r,l)&&r[l]&&e.push(l)}}return e.join(" ")}e.exports?(a.default=a,e.exports=a):void 0===(r=function(){return a}.apply(n,[]))||(e.exports=r)}()},184:function(e,n,t){"use strict";var r=t(0),a=Object(r.createContext)({tabGroupChoices:{},setTabGroupChoices:function(){}});n.a=a},187:function(e,n,t){"use strict";var r=t(0),a=t.n(r);n.a=function(e){return a.a.createElement("div",null,e.children)}},189:function(e,n,t){"use strict";t(24),t(19),t(20);var r=t(0),a=t.n(r),o=t(184);var i=function(){return Object(r.useContext)(o.a)},l=t(179),u=t.n(l),s=t(126),p=t.n(s),c=37,m=39;n.a=function(e){var n=e.block,t=e.children,o=e.defaultValue,l=e.values,s=e.groupId,b=i(),f=b.tabGroupChoices,d=b.setTabGroupChoices,h=Object(r.useState)(o),g=h[0],y=h[1];if(null!=s){var j=f[s];null!=j&&j!==g&&y(j)}var O=function(e){y(e),null!=s&&d(s,e)},v=[];return a.a.createElement("div",null,a.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:u()("tabs",{"tabs--block":n})},l.map((function(e){var n=e.value,t=e.label;return a.a.createElement("li",{role:"tab",tabIndex:"0","aria-selected":g===n,className:u()("tabs__item",p.a.tabItem,{"tabs__item--active":g===n}),key:n,ref:function(e){return v.push(e)},onKeyDown:function(e){return function(e,n,t){switch(t.keyCode){case m:!function(e,n){var t=e.indexOf(n)+1;e[t]?e[t].focus():e[0].focus()}(e,n);break;case c:!function(e,n){var t=e.indexOf(n)-1;e[t]?e[t].focus():e[e.length-1].focus()}(e,n)}}(v,e.target,e)},onFocus:function(){return O(n)},onClick:function(){return O(n)}},t)}))),a.a.createElement("div",{role:"tabpanel",className:"margin-vert--md"},r.Children.toArray(t).filter((function(e){return e.props.value===g}))[0]))}}}]);