(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{120:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return b})),n.d(t,"rightToc",(function(){return o})),n.d(t,"default",(function(){return d}));var a=n(2),r=n(6),i=(n(0),n(143)),l={id:"field",title:"<Field />",sidebar_label:"<Field />"},b={id:"field",title:"<Field />",description:"s component hierarchy to determine the shape of the resulting form value!",source:"@site/docs/field.md",permalink:"/yafl/docs/field",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/field.md",sidebar_label:"<Field />",sidebar:"main",previous:{title:"<Form />",permalink:"/yafl/docs/form"},next:{title:"<Section />",permalink:"/yafl/docs/section"}},o=[{value:"Props",id:"props",children:[{value:"<code>name: string | number</code>",id:"name-string--number",children:[]},{value:"<code>validate?: ((value: T, formValue: F) =&gt; string | void) | (Array&lt;(value: T, formValue: F) =&gt; string | void)&gt;</code>",id:"validate-value-t-formvalue-f--string--void--arrayvalue-t-formvalue-f--string--void",children:[]},{value:"<code>render?: (props: FieldProps&lt;F, T&gt;) =&gt; React.ReactNode</code>",id:"render-props-fieldpropsf-t--reactreactnode",children:[]},{value:"<code>component?: React.ComponentType&lt;FieldProps&lt;F, T&gt;&gt; | string</code>",id:"component-reactcomponenttypefieldpropsf-t--string",children:[]}]},{value:"Render props",id:"render-props",children:[{value:"Field InputProps",id:"field-inputprops",children:[]},{value:"FieldMeta",id:"fieldmeta",children:[]}]}],c={rightToc:o};function d(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Field components are the bread and butter of any form library and Yafl's Field's are no exception! The ",Object(i.b)("inlineCode",{parentName:"p"},"<Field />")," component is more or less equivalent to the Field components found in Formik or Redux-Form. The most important thing to note about the Field component is that you should never name your Field using a 'path' string. Yafl uses a Fields location in the Form's component hierarchy to determine the shape of the resulting form value!"),Object(i.b)("h2",{id:"props"},"Props"),Object(i.b)("h3",{id:"name-string--number"},Object(i.b)("inlineCode",{parentName:"h3"},"name: string | number")),Object(i.b)("p",null,"Name your field! Providing a number usually indicates that this Field appears in an array."),Object(i.b)("h3",{id:"validate-value-t-formvalue-f--string--void--arrayvalue-t-formvalue-f--string--void"},Object(i.b)("inlineCode",{parentName:"h3"},"validate?: ((value: T, formValue: F) => string | void) | (Array<(value: T, formValue: F) => string | void)>")),Object(i.b)("p",null,"A validation function or array of functions that can be used to validate a field. Should return a ",Object(i.b)("inlineCode",{parentName:"p"},"string")," as an error message if validation fails, otherwise ",Object(i.b)("inlineCode",{parentName:"p"},"null")," or ",Object(i.b)("inlineCode",{parentName:"p"},"undefined"),"."),Object(i.b)("h3",{id:"render-props-fieldpropsf-t--reactreactnode"},Object(i.b)("inlineCode",{parentName:"h3"},"render?: (props: FieldProps<F, T>) => React.ReactNode")),Object(i.b)("p",null,"A render prop that accepts an object containing all the good stuff you'll need to render a your Field."),Object(i.b)("h3",{id:"component-reactcomponenttypefieldpropsf-t--string"},Object(i.b)("inlineCode",{parentName:"h3"},"component?: React.ComponentType<FieldProps<F, T>> | string")),Object(i.b)("p",null,"Specify a component to render. If a string is provided then Yafl will attempt to match the string component to one provided in the ",Object(i.b)("inlineCode",{parentName:"p"},"components")," Form prop and if no match is found then it will call React.createElement with the value provided."),Object(i.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"Any additional props that you specify on the ",Object(i.b)("inlineCode",{parentName:"p"},"<Field>")," will simply be forwarded to your component."))),Object(i.b)("h2",{id:"render-props"},"Render props"),Object(i.b)("p",null,"The following is a list of props that are passed to the ",Object(i.b)("inlineCode",{parentName:"p"},"render")," prop or ",Object(i.b)("inlineCode",{parentName:"p"},"component")," prop of every Field. ",Object(i.b)("inlineCode",{parentName:"p"},"T")," and ",Object(i.b)("inlineCode",{parentName:"p"},"F")," correspond to the generic types for the Field and Form respectively."),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Prop"),Object(i.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"input: ")," ",Object(i.b)("a",Object(a.a)({parentName:"td"},{href:"#field-inputprops"}),Object(i.b)("inlineCode",{parentName:"a"},"InputProps<T>"))),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"An object containing the core handlers and props for an input.",Object(i.b)("br",null),Object(i.b)("em",{parentName:"td"},"Allows for easy use of the spread operator."))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"meta: ")," ",Object(i.b)("a",Object(a.a)({parentName:"td"},{href:"#fieldmeta"}),Object(i.b)("inlineCode",{parentName:"a"},"FieldMeta<F, T>"))),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"An object containing any meta state related to the current field as well as some handy functions.")))),Object(i.b)("h3",{id:"field-inputprops"},"Field InputProps"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Prop"),Object(i.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"name: string")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Forwarded from the ",Object(i.b)("inlineCode",{parentName:"td"},"name")," prop of this Field.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"value: T")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"The current value of this Field.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"onBlur: (e: React.FocusEvent<any>) => void")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"The onBlur handler for your input (DOM only).",Object(i.b)("br",null),Object(i.b)("em",{parentName:"td"},"Useful if you need to keep track of which Fields have been visited."))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"onFocus: (e: React.FocusEvent<any>) => void")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"The onFocus handler for your input (DOM only).",Object(i.b)("br",null),Object(i.b)("em",{parentName:"td"},"Useful if you need to keep track of which field is currently active."))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"onChange: (e: React.ChangeEvent<any>) => void")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"The onChange handler for your input (DOM only).",Object(i.b)("br",null),"Sets the value of this Field.")))),Object(i.b)("h3",{id:"fieldmeta"},"FieldMeta"),Object(i.b)("p",null,"TypeScript: ",Object(i.b)("inlineCode",{parentName:"p"},"FieldMeta<F, T>")," where ",Object(i.b)("inlineCode",{parentName:"p"},"F")," and ",Object(i.b)("inlineCode",{parentName:"p"},"T")," correspond to the generic types for the current Field and Form respectively."),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Prop"),Object(i.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"path: string")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"The path for this field.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"visited: boolean")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Indicates whether this Field has been visited.",Object(i.b)("br",null),Object(i.b)("em",{parentName:"td"},"Automatically set to true on when input.onBlur() is called."))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"touched: boolean")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Indicates whether this Field has been touched.",Object(i.b)("br",null),Object(i.b)("em",{parentName:"td"},"Automatically set to true the first time a Field's value is changed."))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"isDirty: boolean")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Indicates whether the ",Object(i.b)("inlineCode",{parentName:"td"},"initialValue")," for this Field is different from the current ",Object(i.b)("inlineCode",{parentName:"td"},"formValue"),".")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"isActive: boolean")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Indicates whether this Field is currently in focus.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"isValid: boolean")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Indicates whether this Field is valid based on whether there are any Validators rendered that match the ",Object(i.b)("inlineCode",{parentName:"td"},"path")," of this Field.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"errors: string[]")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"An array containing any errors for this Field based on whether there are any Validators rendered that match the path of this Field.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"initialValue: T")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"The value this Field was initialized with.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"setValue: (value: T, touch?: boolean) => void")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Sets the value for this Field.",Object(i.b)("br",null),"Optionally specify if this Field should be touched when this function is called.",Object(i.b)("br",null),Object(i.b)("em",{parentName:"td"},"If the ",Object(i.b)("inlineCode",{parentName:"em"},"touch")," paramater is not provided it defaults to ",Object(i.b)("inlineCode",{parentName:"em"},"true"),"."))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"formValue: F")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"The current value of the Form")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"submitCount: number")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"The number of times the Form has been submitted.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"resetForm: () => void")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Clears all Form state. ",Object(i.b)("inlineCode",{parentName:"td"},"formValue")," is reset to its initialValue.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"submit: () => void")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Calls the onSubmit function supplied to the Form component")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"forgetState: () => void")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Resets ",Object(i.b)("inlineCode",{parentName:"td"},"submitCount"),", ",Object(i.b)("inlineCode",{parentName:"td"},"touched")," and ",Object(i.b)("inlineCode",{parentName:"td"},"visited"),". The ",Object(i.b)("inlineCode",{parentName:"td"},"formValue")," is not reset.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"setFormValue: (set: SetFormValueFunc<F>) => void")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Sets the ",Object(i.b)("inlineCode",{parentName:"td"},"formValue")," imperatively.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"setFormVisited: (set: SetFormVisitedFunc<F>) => void")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Sets the Form's ",Object(i.b)("inlineCode",{parentName:"td"},"visited")," state imperatively.",Object(i.b)("br",null),"Accepts a callback with the Form's previous value.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"setFormTouched: (set: SetFormTouchedFunc<F>) => void")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Sets the Form's ",Object(i.b)("inlineCode",{parentName:"td"},"touched")," state imperatively.",Object(i.b)("br",null),"Accepts a callback with the Form's previous visited state.")))))}d.isMDXComponent=!0},143:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return s}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function b(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=r.a.createContext({}),d=function(e){var t=r.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):b(b({},t),e)),n},p=function(e){var t=d(e.components);return r.a.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=d(n),u=a,s=p["".concat(l,".").concat(u)]||p[u]||m[u]||i;return n?r.a.createElement(s,b(b({ref:t},c),{},{components:n})):r.a.createElement(s,b({ref:t},c))}));function s(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=u;var b={};for(var o in t)hasOwnProperty.call(t,o)&&(b[o]=t[o]);b.originalType=e,b.mdxType="string"==typeof e?e:a,l[1]=b;for(var c=2;c<i;c++)l[c]=n[c];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);