(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{113:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return u}));var a=n(2),o=n(6),r=(n(0),n(143)),i={id:"overview",title:"Yet. Another. Form. Library.",sidebar_label:"Overview"},l={id:"overview",title:"Yet. Another. Form. Library.",description:"Let's face it, form libraries are a dime a dozen. There's no shortage of options to choose from when picking out an abstration to help you with your daily form needs: there's redux-form, formik, formsy-react, tcomb-form, react-form, react-final-form... the list goes on. So what distinguishes YAFL from the rest? Yafl does some clever things under the hood (at least I think it does) but you don't - and shouldn't - care about any of that. Yafl tries to strike a balance between ergonomics, size, and performance. Yafl also aims to be the most playful form library on NPM!",source:"@site/docs/overview.md",permalink:"/yafl/docs/overview",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/overview.md",sidebar_label:"Overview",sidebar:"main",next:{title:"Tutorial",permalink:"/yafl/docs/tutorial"}},s=[{value:"Motivation",id:"motivation",children:[]},{value:"Philosophy",id:"philosophy",children:[]},{value:"Why use YAFL?",id:"why-use-yafl",children:[]},{value:"Installation",id:"installation",children:[]},{value:"Basic example",id:"basic-example",children:[]}],c={rightToc:s};function u(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"Let's face it, form libraries are a dime a dozen. There's no shortage of options to choose from when picking out an abstration to help you with your daily form needs: there's ",Object(r.b)("inlineCode",{parentName:"p"},"redux-form"),", ",Object(r.b)("inlineCode",{parentName:"p"},"formik"),", ",Object(r.b)("inlineCode",{parentName:"p"},"formsy-react"),", ",Object(r.b)("inlineCode",{parentName:"p"},"tcomb-form"),", ",Object(r.b)("inlineCode",{parentName:"p"},"react-form"),", ",Object(r.b)("inlineCode",{parentName:"p"},"react-final-form"),"... the list goes on. So what distinguishes ",Object(r.b)("strong",{parentName:"p"},"YAFL")," from the rest? Yafl does some clever things under the hood (at least I think it does) but you don't - and shouldn't - care about any of that. Yafl tries to strike a balance between ergonomics, size, and performance. Yafl also aims to be the most playful form library on NPM!"),Object(r.b)("h2",{id:"motivation"},"Motivation"),Object(r.b)("p",null,"I didn't build Yafl because I saw the need for yet another form library. Instead, Yafl started out as an idea that has evolved throughout development. It has gone through many iterations (I dare you to go through the commit history) and on a number of occations I almost had to start from the beginning when I realized that the current code structure didn't accommodate a specific use case. Validation in particular was handled in multiple wildly different ways before I stumbled on - for better or worse - the idea of rendering a Validator."),Object(r.b)("p",null,'So there you have it, the motivation for the existence of this library was pretty much of the "eh, why not" variety as opposed to the often touted "I saw a need for it" variety. That said however, I\'ve have found Yafl extremely fun and flexible over the last 2 years - even more so, I dare say, than the alternatives.'),Object(r.b)("h2",{id:"philosophy"},"Philosophy"),Object(r.b)("p",null,"Yafl's philosophy is to \"keep it super simple\". While it provides a lot of functionality out of the box, it aims to keep it's API surface area as small as possible while still remaining flexible and easy to use. At the start of Yafl's development, the decision was made to leave as much of the implementation of your form up to you, the developer. Yafl aims to provide the tools to build forms without caring too much about the specific use case."),Object(r.b)("p",null,"You can write content using ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.github.com/gfm/"}),"GitHub-flavored Markdown syntax"),"."),Object(r.b)("h2",{id:"why-use-yafl"},"Why use YAFL?"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Use TypeScript to create strongly typed forms that give you peace of mind and a good nights sleep. \ud83d\ude34"),Object(r.b)("li",{parentName:"ul"},"Create multi-page forms without needing to use specialized components or a state management library like flux or redux. \ud83d\ude2e"),Object(r.b)("li",{parentName:"ul"},"Structure your components to match the shape of your data. This means no more accessing field values using string paths! \ud83e\udd2f"),Object(r.b)("li",{parentName:"ul"},"Deeply nested forms and forms within forms! \ud83c\udf81"),Object(r.b)("li",{parentName:"ul"},"Render an Error! \ud83d\ude31"),Object(r.b)("li",{parentName:"ul"},"Opt out of using Yafl's internal implementation by keeping track of your own form state and only use Yafl's context as a means to intelligently distribute state to your Fields! \ud83d\ude80"),Object(r.b)("li",{parentName:"ul"},"Easily use third pary validation libraries like Yup - it just works!"),Object(r.b)("li",{parentName:"ul"},"Flexible. \ud83d\udcaa"),Object(r.b)("li",{parentName:"ul"},"Fun. \ud83d\ude3b")),Object(r.b)("h2",{id:"installation"},"Installation"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"npm i yafl --save\n")),Object(r.b)("p",null,"Or if you're using yarn"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"yarn add yafl\n")),Object(r.b)("h2",{id:"basic-example"},"Basic example"),Object(r.b)("p",null,"If you've used other form libraries most of this will feel familiar:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'import React, { useState } from \'react\'\nimport { createFormContext } from \'yafl\'\n\nconst { Form, Field, Section } = createFormContext()\n\nfunction ExampleForm (props) {\n  function handleSubmit(formValue) {\n    console.log(formValue)\n    // {\n    //   fullName: \'\',\n    //   contact: {\n    //     email: \'\',\n    //     address: {\n    //       line1: \'\',\n    //       postCode: \'\'\n    //     }\n    //   }\n    // }\n  }\n\n  return (\n    <Form initialValue={formData} onSubmit={handleSubmit}>\n      {yafl => (\n        <form onSubmit={yafl.submit}>\n          <Field name="fullName" component="input" />\n          <Section name="contact">\n            <Field name="email" component="input" validate={validateEmail} />\n            <Section name="address">\n              <Field name="line1" component="input" />\n              <Field name="postCode" component="input" />\n            </Section>\n          </Section>\n          <button type="submit" disabled={!yafl.formIsDirty}>\n            Submit Me!\n          </button>\n        </form>\n      )}\n    </Form>\n  )\n}\n')))}u.isMDXComponent=!0},143:function(e,t,n){"use strict";n.d(t,"a",(function(){return m})),n.d(t,"b",(function(){return d}));var a=n(0),o=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=o.a.createContext({}),u=function(e){var t=o.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=u(e.components);return o.a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},b=o.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=u(n),b=a,d=m["".concat(i,".").concat(b)]||m[b]||p[b]||r;return n?o.a.createElement(d,l(l({ref:t},c),{},{components:n})):o.a.createElement(d,l({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=b;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<r;c++)i[c]=n[c];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"}}]);